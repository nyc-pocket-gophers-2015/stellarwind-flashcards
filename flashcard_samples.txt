A boolean logic function that asks whether or not a targeted expression refers to anything recognizable in Ruby; i.e. literal object, local variable that has been initialized, method name visible from the current scope, etc.
defined?
false
Paired with end, this can delimit a code block, much like curly braces; however, curly braces retain higher precedence.
do
false
Gives an "otherwise" within a function, if-statement, or for-loop, i.e. if cats = cute, puts "Yay!" else puts "Oh, a cat.‚Äù
else
false
Much like else, but has a higher precedence, and is usually paired with terms.
elsif
false
Delimits a "begin" block of code, which can allow the use of while and until in modifier position with multi-line statements.
begin
false
Gives an unconditional termination to a code block, and is usually placed with an argument.
break
false
starts a case statement; this block of code will output a result and end when it's terms are fulfilled, which are defined with when or else.
case
false
Opens a class definition block, which can later be reopened and added to with variables and even functions.
class
false
Used to define a function.
def
false
